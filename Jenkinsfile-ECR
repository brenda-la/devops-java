@Library('my-shared-library') _
pipeline{
    
    agent any
     parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
    string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '948031963126')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'us-east-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'javaapps')
       
    }

    stages{
      
        stage('Git checkout'){ when { expression {  params.action == 'create' } }
            steps{
              script{
                
               gitCheckout(branch:"master", url:"https://github.com/brenda-la/devopos_java_app.git")
              
              }  
            }
        }
         stage('unit test maven'){
            when { expression {  params.action == 'create' } }
            steps{
              script{
                
              mvnTest()
              
              }  
            }
        }
        stage('maven integration test'){
             when { expression {  params.action == 'create' } }
            steps{
              script{
                
              mvnIntegrationTest()
              
              }  
            }
        }
        //     stage('Static code analysis: Sonarqube'){
       //  when { expression {  params.action == 'create' } }
        //    steps{
          //     script{
                   
              //     def SonarQubecredentialsId = 'sonar12'
              //     statiCodeAnalysis(SonarQubecredentialsId)
            //   }
        //    }
      //  }
         
     stage('Maven Build : maven'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   mvnBuild()
               }
            }
        }
         stage('Docker Image Build : ECR'){
          when { expression {  params.action == 'create' } }
             steps{
                script{
                   
                    dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
             }
    }
    stage('Docker Image Scan: trivy '){
         when { expression {  params.action == 'create' } }
            steps{
            script{
                   
                   dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
    stage('Docker Image Push : ECR '){
          when { expression {  params.action == 'create' } }
             steps{
                script{
                   
                    dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
             }
         }
       //   stage('Docker Image Cleanup : ECR '){
       //  when { expression {  params.action == 'create' } }
        //     steps{
         //       script{
                   
             //       dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
             //   }
            // }
         //}
}
}
